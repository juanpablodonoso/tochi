CCS PCH C Compiler, Version 5.008, 5967               09-mar.-18 18:02

               Filename:   C:\Users\aulas\Desktop\Pruebas\ccs5.lst

               ROM used:   140 bytes (0%)
                           Largest free fragment is 30576
               RAM used:   7 (0%) at main() level
                           8 (0%) worst case
               Stack used: 1 locations
               Stack size: 31

*
0800:  GOTO   0830
.................... #include <tarjeta.h> 
....................  
.................... #ifndef _TARJETA_ 
.................... #define _TARJETA_ 
....................  
.................... #include <18F4550.h> 
.................... //////// Standard Header file for the PIC18F4550 device //////////////// 
.................... #device PIC18F4550 
....................  
.................... #list 
....................  
....................  
.................... #fuses USBDIV, CPUDIV1, PLL5, HSPLL, NOFCMEN, NOIESO, VREGEN, BORV21, BROWNOUT, NOPUT, WDT32768, NOWDT 
.................... #fuses MCLR, NOLPT1OSC, NOPBADEN, CCP2C1, NODEBUG, NOXINST, NOICPRT, NOLVP, STVREN, NOPROTECT, NOCPD 
.................... #fuses NOCPB, NOWRT, NOWRTD, WRTB, NOWRTC, NOEBTR, NOEBTRB 
....................  
.................... /*********************************************************** 
....................       EVITAMOS LA ZONA DE MEMORIA ASIGNADA AL MONITOR 
.................... ***********************************************************/ 
....................  
.................... #define LOADER_END   0x7FF 
.................... #define LOADER_SIZE   0x6FF 
....................  
.................... #build(reset=LOADER_END+1, interrupt=LOADER_END+9) 
.................... #org 0, LOADER_END {} 
.................... //#org 0x82A, 0x7FFF 
....................  
....................  
.................... /*********************************************************** 
....................            FUNCIONES PARA MOVER LOS MOTORES 
.................... MX_H() : Mueve el motor en sentido horario 
.................... MX_A() : Mueve el motor en sentido anti-horario 
.................... MX_P() : Para el motor 
.................... ***********************************************************/ 
....................  
.................... void M1_A(){ 
....................    output_high(PIN_A1); 
....................    output_high(PIN_D7); 
....................    output_low(PIN_D6); 
.................... } 
....................  
.................... void M1_H(){ 
....................    output_high(PIN_A1); 
....................    output_low(PIN_D7); 
....................    output_high(PIN_D6); 
.................... } 
....................  
.................... void M1_P(){ 
....................    output_high(PIN_A1); 
....................    output_low(PIN_D7); 
....................    output_low(PIN_D6); 
.................... } 
....................  
.................... void M2_A(){ 
....................    output_high(PIN_A0); 
....................    output_high(PIN_C2); 
....................    output_low(PIN_D5); 
.................... } 
....................  
.................... void M2_H(){ 
....................    output_high(PIN_A0); 
....................    output_low(PIN_C2); 
....................    output_high(PIN_D5); 
.................... } 
....................  
.................... void M2_P(){ 
....................    output_high(PIN_A0); 
....................    output_low(PIN_C2); 
....................    output_low(PIN_D5); 
.................... } 
....................  
.................... void M3_A(){ 
....................    output_high(PIN_A2); 
....................    output_low(PIN_B2); 
....................    output_high(PIN_E0); 
.................... } 
....................  
.................... void M3_H(){ 
....................    output_high(PIN_A2); 
....................    output_high(PIN_B2); 
....................    output_low(PIN_E0); 
.................... } 
....................  
.................... void M3_P(){ 
....................    output_high(PIN_A2); 
....................    output_low(PIN_B2); 
....................    output_low(PIN_E0); 
.................... } 
....................  
.................... void M4_A(){ 
....................    output_high(PIN_A3); 
....................    output_low(PIN_E2); 
....................    output_high(PIN_E1); 
.................... } 
....................  
.................... void M4_H(){ 
....................    output_high(PIN_A3); 
....................    output_high(PIN_E2); 
....................    output_low(PIN_E1); 
.................... } 
....................  
.................... void M4_P(){ 
....................    output_high(PIN_A3); 
....................    output_low(PIN_E2); 
....................    output_low(PIN_E1); 
.................... } 
....................  
....................  
.................... /*********************************************************** 
....................             MACRO PARA LEER EL PULSADOR P2 
.................... ***********************************************************/ 
....................  
.................... #define P2   (!input(PIN_B4)) 
....................  
.................... /*********************************************************** 
....................               MACROS PARA MANEJAR EL LED 
.................... ***********************************************************/ 
....................  
.................... #define led_on()   output_high(PIN_A5) 
.................... #define led_off()   output_low(PIN_A5) 
....................  
.................... /*********************************************************** 
....................            DEFINICION DE LAS E/S DIRECTAS 
.................... ***********************************************************/ 
....................  
.................... #define ES0   PIN_A4 
.................... #define ES1   PIN_B3 
.................... #define ES2   PIN_B5 
.................... #define ES3   PIN_B6 
.................... #define ES4   PIN_B7 
.................... #define ES5   PIN_C7 
.................... #define ES6   PIN_C6 
.................... #define ES7   PIN_C1 
.................... #define ES8   PIN_C0 
....................  
.................... /*********************************************************** 
....................         MACROS PARA LEER LOS SENSORES FIJOS INX 
.................... ***********************************************************/ 
....................  
.................... #define IN1      input(PIN_D0) 
.................... #define IN2      input(PIN_D1) 
.................... #define IN3      input(PIN_D2) 
.................... #define IN4      input(PIN_D3) 
.................... #define IN5      input(PIN_D4) 
.................... //IN6 ES UNA E/S CONFIGURABLE 
.................... //#define IN6      input(ES0) 
.................... //#define IN6      input(ES1) 
.................... // ... O CUALQUIER OTRA E/S DIRECTA 
....................  
.................... /*********************************************************** 
....................             DIRECTIVA PARA EL USO DEL I2C 
.................... ***********************************************************/ 
.................... #use I2C(master, sda=PIN_B0, scl=PIN_B1) 
....................  
.................... #endif 
....................  
....................  
.................... #use delay (clock=48000000) 
*
0808:  CLRF   FEA
080A:  MOVLW  07
080C:  MOVWF  FE9
080E:  MOVF   FEF,W
0810:  BZ    082E
0812:  MOVLW  0F
0814:  MOVWF  01
0816:  CLRF   00
0818:  DECFSZ 00,F
081A:  BRA    0818
081C:  DECFSZ 01,F
081E:  BRA    0816
0820:  MOVLW  8F
0822:  MOVWF  00
0824:  DECFSZ 00,F
0826:  BRA    0824
0828:  NOP   
082A:  DECFSZ FEF,F
082C:  BRA    0812
082E:  RETURN 0
....................  
.................... long int aux  = 100; 
....................  
.................... void main(){ 
0830:  CLRF   FF8
0832:  BCF    FD0.7
0834:  CLRF   05
0836:  MOVLW  64
0838:  MOVWF  04
083A:  MOVF   FC1,W
083C:  ANDLW  C0
083E:  IORLW  0F
0840:  MOVWF  FC1
0842:  MOVLW  07
0844:  MOVWF  FB4
....................   
....................    while(TRUE){ 
....................       if(P2){ 
0846:  BSF    F93.4
0848:  BTFSC  F81.4
084A:  BRA    0854
....................          aux += 50; 
084C:  MOVLW  32
084E:  ADDWF  04,F
0850:  MOVLW  00
0852:  ADDWFC 05,F
....................       } 
....................       led_on(); 
0854:  BCF    F92.5
0856:  BSF    F89.5
....................       delay_ms(aux); 
0858:  MOVFF  05,06
085C:  INCF   06,F
085E:  DECF   06,F
0860:  BTFSC  FD8.2
0862:  BRA    086A
0864:  SETF   07
0866:  RCALL  0808
0868:  BRA    085E
086A:  MOVFF  04,07
086E:  RCALL  0808
....................       led_off(); 
0870:  BCF    F92.5
0872:  BCF    F89.5
....................       delay_ms(aux); 
0874:  MOVFF  05,06
0878:  INCF   06,F
087A:  DECF   06,F
087C:  BTFSC  FD8.2
087E:  BRA    0886
0880:  SETF   07
0882:  RCALL  0808
0884:  BRA    087A
0886:  MOVFF  04,07
088A:  RCALL  0808
088C:  BRA    0846
....................    } 
.................... } 
088E:  SLEEP 

Configuration Fuses:
   Word  1: 0E24   PLL5 CPUDIV1 USBDIV HSPLL NOFCMEN NOIESO
   Word  2: 1E3F   NOPUT BROWNOUT BORV21 VREGEN NOWDT WDT32768
   Word  3: 8100   CCP2C1 NOPBADEN NOLPT1OSC MCLR
   Word  4: 0081   STVREN NOLVP ICSP1 NOXINST NODEBUG
   Word  5: C00F   NOPROTECT NOCPB NOCPD
   Word  6: A00F   NOWRT NOWRTC WRTB NOWRTD
   Word  7: 400F   NOEBTR NOEBTRB
