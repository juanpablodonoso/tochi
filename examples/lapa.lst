CCS PCH C Compiler, Version 5.008, 5967               27-abr.-18 17:48

               Filename:   C:\Users\pPabl\Desktop\tochi\examples\lapa.lst

               ROM used:   418 bytes (1%)
                           Largest free fragment is 30298
               RAM used:   28 (1%) at main() level
                           28 (1%) worst case
               Stack used: 5 locations (2 in main + 3 for interrupts)
               Stack size: 31

*
0800:  GOTO   0920
*
0808:  MOVWF  04
080A:  MOVFF  FD8,05
080E:  MOVFF  FE0,06
0812:  MOVLB  0
0814:  MOVFF  FE9,0C
0818:  MOVFF  FEA,07
081C:  MOVFF  FE1,08
0820:  MOVFF  FE2,09
0824:  MOVFF  FD9,0A
0828:  MOVFF  FDA,0B
082C:  MOVFF  FF3,12
0830:  MOVFF  FF4,13
0834:  MOVFF  FFA,14
0838:  MOVFF  00,0E
083C:  MOVFF  01,0F
0840:  MOVFF  02,10
0844:  MOVFF  03,11
0848:  BTFSS  FF2.5
084A:  GOTO   0854
084E:  BTFSC  FF2.2
0850:  GOTO   08EC
0854:  MOVFF  0E,00
0858:  MOVFF  0F,01
085C:  MOVFF  10,02
0860:  MOVFF  11,03
0864:  MOVFF  0C,FE9
0868:  MOVFF  07,FEA
086C:  BSF    07.7
086E:  MOVFF  08,FE1
0872:  MOVFF  09,FE2
0876:  MOVFF  0A,FD9
087A:  MOVFF  0B,FDA
087E:  MOVFF  12,FF3
0882:  MOVFF  13,FF4
0886:  MOVFF  14,FFA
088A:  MOVF   04,W
088C:  MOVFF  06,FE0
0890:  MOVFF  05,FD8
0894:  RETFIE 0
.................... #include <tarjeta.h> 
....................  
.................... #ifndef _TARJETA_ 
.................... #define _TARJETA_ 
....................  
.................... #include <18F4550.h> 
.................... //////// Standard Header file for the PIC18F4550 device //////////////// 
.................... #device PIC18F4550 
....................  
.................... #list 
....................  
....................  
.................... #fuses USBDIV, CPUDIV1, PLL5, HSPLL, NOFCMEN, NOIESO, VREGEN, BORV21, BROWNOUT, NOPUT, WDT32768, NOWDT 
.................... #fuses MCLR, NOLPT1OSC, NOPBADEN, CCP2C1, NODEBUG, NOXINST, NOICPRT, NOLVP, STVREN, NOPROTECT, NOCPD 
.................... #fuses NOCPB, NOWRT, NOWRTD, WRTB, NOWRTC, NOEBTR, NOEBTRB 
....................  
.................... /*********************************************************** 
....................       EVITAMOS LA ZONA DE MEMORIA ASIGNADA AL MONITOR 
.................... ***********************************************************/ 
....................  
.................... #define LOADER_END   0x7FF 
.................... #define LOADER_SIZE   0x6FF 
....................  
.................... #build(reset=LOADER_END+1, interrupt=LOADER_END+9) 
.................... #org 0, LOADER_END {} 
.................... //#org 0x82A, 0x7FFF 
....................  
....................  
.................... /*********************************************************** 
....................            FUNCIONES PARA MOVER LOS MOTORES 
.................... MX_H() : Mueve el motor en sentido horario 
.................... MX_A() : Mueve el motor en sentido anti-horario 
.................... MX_P() : Para el motor 
.................... ***********************************************************/ 
....................  
.................... void M1_A(){ 
....................    output_high(PIN_A1); 
*
08C8:  BCF    F92.1
08CA:  BSF    F89.1
....................    output_high(PIN_D7); 
08CC:  BCF    F95.7
08CE:  BSF    F8C.7
....................    output_low(PIN_D6); 
08D0:  BCF    F95.6
08D2:  BCF    F8C.6
08D4:  RETURN 0
.................... } 
....................  
.................... void M1_H(){ 
....................    output_high(PIN_A1); 
....................    output_low(PIN_D7); 
....................    output_high(PIN_D6); 
.................... } 
....................  
.................... void M1_P(){ 
....................    output_high(PIN_A1); 
*
0896:  BCF    F92.1
0898:  BSF    F89.1
....................    output_low(PIN_D7); 
089A:  BCF    F95.7
089C:  BCF    F8C.7
....................    output_low(PIN_D6); 
089E:  BCF    F95.6
08A0:  BCF    F8C.6
08A2:  RETURN 0
.................... } 
....................  
.................... void M2_A(){ 
....................    output_high(PIN_A0); 
....................    output_high(PIN_C2); 
....................    output_low(PIN_D5); 
.................... } 
....................  
.................... void M2_H(){ 
....................    output_high(PIN_A0); 
....................    output_low(PIN_C2); 
....................    output_high(PIN_D5); 
.................... } 
....................  
.................... void M2_P(){ 
....................    output_high(PIN_A0); 
....................    output_low(PIN_C2); 
....................    output_low(PIN_D5); 
.................... } 
....................  
.................... void M3_A(){ 
....................    output_high(PIN_A2); 
....................    output_low(PIN_B2); 
....................    output_high(PIN_E0); 
.................... } 
....................  
.................... void M3_H(){ 
....................    output_high(PIN_A2); 
08A4:  BCF    F92.2
08A6:  BSF    F89.2
....................    output_high(PIN_B2); 
08A8:  BCF    F93.2
08AA:  BSF    F8A.2
....................    output_low(PIN_E0); 
08AC:  BCF    F96.0
08AE:  BCF    F8D.0
08B0:  RETURN 0
.................... } 
....................  
.................... void M3_P(){ 
....................    output_high(PIN_A2); 
*
08BA:  BCF    F92.2
08BC:  BSF    F89.2
....................    output_low(PIN_B2); 
08BE:  BCF    F93.2
08C0:  BCF    F8A.2
....................    output_low(PIN_E0); 
08C2:  BCF    F96.0
08C4:  BCF    F8D.0
08C6:  RETURN 0
.................... } 
....................  
.................... void M4_A(){ 
....................    output_high(PIN_A3); 
....................    output_low(PIN_E2); 
....................    output_high(PIN_E1); 
.................... } 
....................  
.................... void M4_H(){ 
....................    output_high(PIN_A3); 
....................    output_high(PIN_E2); 
....................    output_low(PIN_E1); 
.................... } 
....................  
.................... void M4_P(){ 
....................    output_high(PIN_A3); 
....................    output_low(PIN_E2); 
....................    output_low(PIN_E1); 
.................... } 
....................  
....................  
.................... /*********************************************************** 
....................             MACRO PARA LEER EL PULSADOR P2 
.................... ***********************************************************/ 
....................  
.................... #define P2   (!input(PIN_B4)) 
....................  
.................... /*********************************************************** 
....................               MACROS PARA MANEJAR EL LED 
.................... ***********************************************************/ 
....................  
.................... #define led_on()   output_high(PIN_A5) 
.................... #define led_off()   output_low(PIN_A5) 
....................  
.................... /*********************************************************** 
....................            DEFINICION DE LAS E/S DIRECTAS 
.................... ***********************************************************/ 
....................  
.................... #define ES0   PIN_A4 
.................... #define ES1   PIN_B3 
.................... #define ES2   PIN_B5 
.................... #define ES3   PIN_B6 
.................... #define ES4   PIN_B7 
.................... #define ES5   PIN_C7 
.................... #define ES6   PIN_C6 
.................... #define ES7   PIN_C1 
.................... #define ES8   PIN_C0 
....................  
.................... /*********************************************************** 
....................         MACROS PARA LEER LOS SENSORES FIJOS INX 
.................... ***********************************************************/ 
....................  
.................... #define IN1      input(PIN_D0) 
.................... #define IN2      input(PIN_D1) 
.................... #define IN3      input(PIN_D2) 
.................... #define IN4      input(PIN_D3) 
.................... #define IN5      input(PIN_D4) 
.................... //IN6 ES UNA E/S CONFIGURABLE 
.................... //#define IN6      input(ES0) 
.................... //#define IN6      input(ES1) 
.................... // ... O CUALQUIER OTRA E/S DIRECTA 
....................  
.................... /*********************************************************** 
....................             DIRECTIVA PARA EL USO DEL I2C 
.................... ***********************************************************/ 
.................... #use I2C(master, sda=PIN_B0, scl=PIN_B1) 
....................  
.................... #endif 
....................  
....................  
....................  
.................... // flags para controlar los movimientos  
.................... int choque_derecha = 0, 
....................     choque_izquierda = 0,  
....................     parar = 0; 
.................... int aux  = 0;  // contador velocidad  
.................... int pwm = 90;  // velocidad inicial  
....................  
....................  
.................... void avanza_izquierda() { 
....................    M3_P();  
*
08D6:  RCALL  08BA
....................    M1_A();    
08D8:  RCALL  08C8
08DA:  GOTO   0908 (RETURN)
.................... } 
.................... void avanza_derecha() {  
....................    M1_P();  
*
08B2:  RCALL  0896
....................    M3_H(); 
08B4:  RCALL  08A4
08B6:  GOTO   0900 (RETURN)
.................... } 
....................  
.................... void _stop() { 
....................    M1_P();  
*
08DE:  RCALL  0896
....................    M3_P();  
08E0:  RCALL  08BA
08E2:  GOTO   0914 (RETURN)
.................... } 
....................  
.................... void _avanzar() { 
....................    M1_A(); 
08E6:  RCALL  08C8
....................    M3_H();  
08E8:  RCALL  08A4
08EA:  RETURN 0
....................     
.................... } 
....................  
....................  
.................... #INT_TIMER0 
.................... void isr_tmr0(){ 
....................    set_timer0(65067); 
08EC:  MOVLW  FE
08EE:  MOVWF  FD7
08F0:  MOVLW  2B
08F2:  MOVWF  FD6
....................    if(aux <= pwm){ 
08F4:  MOVF   1A,W
08F6:  SUBWF  1B,W
08F8:  BNC   0918
....................         if(choque_izquierda) { // activado el bumper derecho 
08FA:  MOVF   18,F
08FC:  BZ    0902
....................          avanza_derecha();   
08FE:  BRA    08B2
....................         }else if(choque_derecha){ // activo el bumber izquierdo 
0900:  BRA    0918
0902:  MOVF   17,F
0904:  BZ    090A
....................          avanza_izquierda();  
0906:  BRA    08D6
....................         }else if(choque_izquierda && choque_derecha) { 
0908:  BRA    0918
090A:  MOVF   18,F
090C:  BZ    0916
090E:  MOVF   17,F
0910:  BZ    0916
....................            _stop();  
0912:  BRA    08DE
....................         }else{ // Pvanzan 
0914:  BRA    0918
....................          _avanzar();  
0916:  RCALL  08E6
....................         }         
....................    } 
....................    aux++; 
0918:  INCF   1A,F
091A:  BCF    FF2.2
091C:  GOTO   0854
.................... } 
....................  
....................  
....................  
....................  
....................  
.................... void main(){ 
0920:  CLRF   FF8
0922:  BCF    FD0.7
0924:  BSF    07.7
0926:  CLRF   17
0928:  CLRF   18
092A:  CLRF   19
092C:  CLRF   1A
092E:  MOVLW  5A
0930:  MOVWF  1B
0932:  MOVF   FC1,W
0934:  ANDLW  C0
0936:  IORLW  0F
0938:  MOVWF  FC1
093A:  MOVLW  07
093C:  MOVWF  FB4
....................    setup_timer_0(RTCC_INTERNAL); 
093E:  MOVLW  80
0940:  MOVWF  FD5
....................    enable_interrupts(INT_TIMER0); 
0942:  BSF    FF2.5
....................    enable_interrupts(GLOBAL);     
0944:  MOVLW  C0
0946:  IORWF  FF2,F
....................    while(TRUE){ 
....................     if(IN1) { 
0948:  BSF    F95.0
094A:  BTFSS  F83.0
094C:  BRA    0956
....................       //avanzar_derecha();  
....................       choque_izquierda = 1; choque_derecha = 0;  
094E:  MOVLW  01
0950:  MOVWF  18
0952:  CLRF   17
....................      // while(IN1) {} 
....................        
....................     }else if(IN2){ 
0954:  BRA    0992
0956:  BSF    F95.1
0958:  BTFSS  F83.1
095A:  BRA    0964
....................       choque_derecha = 1; choque_izquierda = 0;  
095C:  MOVLW  01
095E:  MOVWF  17
0960:  CLRF   18
....................       //while(IN2) {}  
....................     } else if(IN1 && IN2) { 
0962:  BRA    0992
0964:  BSF    F95.0
0966:  BTFSS  F83.0
0968:  BRA    0984
096A:  BSF    F95.1
096C:  BTFSS  F83.1
096E:  BRA    0984
....................       choque_derecha = 1;  
0970:  MOVLW  01
0972:  MOVWF  17
....................       choque_izquierda = 1;  
0974:  MOVWF  18
....................       while(IN1 && IN2) {} 
0976:  BSF    F95.0
0978:  BTFSS  F83.0
097A:  BRA    0982
097C:  BSF    F95.1
097E:  BTFSC  F83.1
0980:  BRA    0976
....................     } 
0982:  BRA    0992
0984:  CLRF   16
0986:  BTFSC  FF2.7
0988:  BSF    16.7
098A:  BCF    FF2.7
....................     else  _avanzar();  
098C:  RCALL  08E6
098E:  BTFSC  16.7
0990:  BSF    FF2.7
....................     
....................   
....................       if(P2){ 
0992:  BSF    F93.4
0994:  BTFSC  F81.4
0996:  BRA    09A2
....................          pwm += 10; 
0998:  MOVLW  0A
099A:  ADDWF  1B,F
....................          while (P2){}     
099C:  BSF    F93.4
099E:  BTFSS  F81.4
09A0:  BRA    099C
....................       } 
09A2:  BRA    0948
....................    } 
.................... } 
....................  
09A4:  SLEEP 

Configuration Fuses:
   Word  1: 0E24   PLL5 CPUDIV1 USBDIV HSPLL NOFCMEN NOIESO
   Word  2: 1E3F   NOPUT BROWNOUT BORV21 VREGEN NOWDT WDT32768
   Word  3: 8100   CCP2C1 NOPBADEN NOLPT1OSC MCLR
   Word  4: 0081   STVREN NOLVP ICSP1 NOXINST NODEBUG
   Word  5: C00F   NOPROTECT NOCPB NOCPD
   Word  6: A00F   NOWRT NOWRTC WRTB NOWRTD
   Word  7: 400F   NOEBTR NOEBTRB
