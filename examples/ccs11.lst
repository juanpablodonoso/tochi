CCS PCH C Compiler, Version 5.008, 5967               16-mar.-18 17:50

               Filename:   C:\Users\aulas\Desktop\Pruebas\ccs11.lst

               ROM used:   174 bytes (1%)
                           Largest free fragment is 30542
               RAM used:   5 (0%) at main() level
                           6 (0%) worst case
               Stack used: 1 locations
               Stack size: 31

*
0800:  GOTO   085E
.................... #include <tarjeta.h> 
....................  
.................... #ifndef _TARJETA_ 
.................... #define _TARJETA_ 
....................  
.................... #include <18F4550.h> 
.................... //////// Standard Header file for the PIC18F4550 device //////////////// 
.................... #device PIC18F4550 
....................  
.................... #list 
....................  
....................  
.................... #fuses USBDIV, CPUDIV1, PLL5, HSPLL, NOFCMEN, NOIESO, VREGEN, BORV21, BROWNOUT, NOPUT, WDT32768, NOWDT 
.................... #fuses MCLR, NOLPT1OSC, NOPBADEN, CCP2C1, NODEBUG, NOXINST, NOICPRT, NOLVP, STVREN, NOPROTECT, NOCPD 
.................... #fuses NOCPB, NOWRT, NOWRTD, WRTB, NOWRTC, NOEBTR, NOEBTRB 
....................  
.................... /*********************************************************** 
....................       EVITAMOS LA ZONA DE MEMORIA ASIGNADA AL MONITOR 
.................... ***********************************************************/ 
....................  
.................... #define LOADER_END   0x7FF 
.................... #define LOADER_SIZE   0x6FF 
....................  
.................... #build(reset=LOADER_END+1, interrupt=LOADER_END+9) 
.................... #org 0, LOADER_END {} 
.................... //#org 0x82A, 0x7FFF 
....................  
....................  
.................... /*********************************************************** 
....................            FUNCIONES PARA MOVER LOS MOTORES 
.................... MX_H() : Mueve el motor en sentido horario 
.................... MX_A() : Mueve el motor en sentido anti-horario 
.................... MX_P() : Para el motor 
.................... ***********************************************************/ 
....................  
.................... void M1_A(){ 
....................    output_high(PIN_A1); 
....................    output_high(PIN_D7); 
....................    output_low(PIN_D6); 
.................... } 
....................  
.................... void M1_H(){ 
....................    output_high(PIN_A1); 
....................    output_low(PIN_D7); 
....................    output_high(PIN_D6); 
.................... } 
....................  
.................... void M1_P(){ 
....................    output_high(PIN_A1); 
....................    output_low(PIN_D7); 
....................    output_low(PIN_D6); 
.................... } 
....................  
.................... void M2_A(){ 
....................    output_high(PIN_A0); 
....................    output_high(PIN_C2); 
....................    output_low(PIN_D5); 
.................... } 
....................  
.................... void M2_H(){ 
....................    output_high(PIN_A0); 
....................    output_low(PIN_C2); 
....................    output_high(PIN_D5); 
.................... } 
....................  
.................... void M2_P(){ 
....................    output_high(PIN_A0); 
....................    output_low(PIN_C2); 
....................    output_low(PIN_D5); 
.................... } 
....................  
.................... void M3_A(){ 
....................    output_high(PIN_A2); 
....................    output_low(PIN_B2); 
....................    output_high(PIN_E0); 
.................... } 
....................  
.................... void M3_H(){ 
....................    output_high(PIN_A2); 
....................    output_high(PIN_B2); 
....................    output_low(PIN_E0); 
.................... } 
....................  
.................... void M3_P(){ 
....................    output_high(PIN_A2); 
....................    output_low(PIN_B2); 
....................    output_low(PIN_E0); 
.................... } 
....................  
.................... void M4_A(){ 
....................    output_high(PIN_A3); 
*
0808:  BCF    F92.3
080A:  BSF    F89.3
....................    output_low(PIN_E2); 
080C:  BCF    F96.2
080E:  BCF    F8D.2
....................    output_high(PIN_E1); 
0810:  BCF    F96.1
0812:  BSF    F8D.1
0814:  GOTO   0870 (RETURN)
.................... } 
....................  
.................... void M4_H(){ 
....................    output_high(PIN_A3); 
*
084E:  BCF    F92.3
0850:  BSF    F89.3
....................    output_high(PIN_E2); 
0852:  BCF    F96.2
0854:  BSF    F8D.2
....................    output_low(PIN_E1); 
0856:  BCF    F96.1
0858:  BCF    F8D.1
085A:  GOTO   0890 (RETURN)
.................... } 
....................  
.................... void M4_P(){ 
....................    output_high(PIN_A3); 
*
0840:  BCF    F92.3
0842:  BSF    F89.3
....................    output_low(PIN_E2); 
0844:  BCF    F96.2
0846:  BCF    F8D.2
....................    output_low(PIN_E1); 
0848:  BCF    F96.1
084A:  BCF    F8D.1
084C:  RETURN 0
.................... } 
....................  
....................  
.................... /*********************************************************** 
....................             MACRO PARA LEER EL PULSADOR P2 
.................... ***********************************************************/ 
....................  
.................... #define P2   (!input(PIN_B4)) 
....................  
.................... /*********************************************************** 
....................               MACROS PARA MANEJAR EL LED 
.................... ***********************************************************/ 
....................  
.................... #define led_on()   output_high(PIN_A5) 
.................... #define led_off()   output_low(PIN_A5) 
....................  
.................... /*********************************************************** 
....................            DEFINICION DE LAS E/S DIRECTAS 
.................... ***********************************************************/ 
....................  
.................... #define ES0   PIN_A4 
.................... #define ES1   PIN_B3 
.................... #define ES2   PIN_B5 
.................... #define ES3   PIN_B6 
.................... #define ES4   PIN_B7 
.................... #define ES5   PIN_C7 
.................... #define ES6   PIN_C6 
.................... #define ES7   PIN_C1 
.................... #define ES8   PIN_C0 
....................  
.................... /*********************************************************** 
....................         MACROS PARA LEER LOS SENSORES FIJOS INX 
.................... ***********************************************************/ 
....................  
.................... #define IN1      input(PIN_D0) 
.................... #define IN2      input(PIN_D1) 
.................... #define IN3      input(PIN_D2) 
.................... #define IN4      input(PIN_D3) 
.................... #define IN5      input(PIN_D4) 
.................... //IN6 ES UNA E/S CONFIGURABLE 
.................... //#define IN6      input(ES0) 
.................... //#define IN6      input(ES1) 
.................... // ... O CUALQUIER OTRA E/S DIRECTA 
....................  
.................... /*********************************************************** 
....................             DIRECTIVA PARA EL USO DEL I2C 
.................... ***********************************************************/ 
.................... #use I2C(master, sda=PIN_B0, scl=PIN_B1) 
....................  
.................... #endif 
....................  
....................  
.................... #use delay (clock=48000000) 
*
0818:  CLRF   FEA
081A:  MOVLW  06
081C:  MOVWF  FE9
081E:  MOVF   FEF,W
0820:  BZ    083E
0822:  MOVLW  0F
0824:  MOVWF  01
0826:  CLRF   00
0828:  DECFSZ 00,F
082A:  BRA    0828
082C:  DECFSZ 01,F
082E:  BRA    0826
0830:  MOVLW  8F
0832:  MOVWF  00
0834:  DECFSZ 00,F
0836:  BRA    0834
0838:  NOP   
083A:  DECFSZ FEF,F
083C:  BRA    0822
083E:  RETURN 0
....................  
.................... void main(){ 
*
085E:  CLRF   FF8
0860:  BCF    FD0.7
0862:  MOVF   FC1,W
0864:  ANDLW  C0
0866:  IORLW  0F
0868:  MOVWF  FC1
086A:  MOVLW  07
086C:  MOVWF  FB4
....................     
....................       
....................    while(TRUE){ 
....................     
....................       M4_A(); 
086E:  BRA    0808
....................       //M4_P(); 
....................       delay_ms(1000); 
0870:  MOVLW  04
0872:  MOVWF  05
0874:  MOVLW  FA
0876:  MOVWF  06
0878:  RCALL  0818
087A:  DECFSZ 05,F
087C:  BRA    0874
....................       //M4_H(); 
....................       M4_P(); 
087E:  RCALL  0840
....................       delay_ms(1000); 
0880:  MOVLW  04
0882:  MOVWF  05
0884:  MOVLW  FA
0886:  MOVWF  06
0888:  RCALL  0818
088A:  DECFSZ 05,F
088C:  BRA    0884
....................        
....................       M4_H(); 
088E:  BRA    084E
....................       delay_ms(1000); 
0890:  MOVLW  04
0892:  MOVWF  05
0894:  MOVLW  FA
0896:  MOVWF  06
0898:  RCALL  0818
089A:  DECFSZ 05,F
089C:  BRA    0894
....................        
....................       M4_P();  
089E:  RCALL  0840
....................       delay_ms(1000);  
08A0:  MOVLW  04
08A2:  MOVWF  05
08A4:  MOVLW  FA
08A6:  MOVWF  06
08A8:  RCALL  0818
08AA:  DECFSZ 05,F
08AC:  BRA    08A4
08AE:  BRA    086E
....................    } 
.................... } 
....................  
08B0:  SLEEP 

Configuration Fuses:
   Word  1: 0E24   PLL5 CPUDIV1 USBDIV HSPLL NOFCMEN NOIESO
   Word  2: 1E3F   NOPUT BROWNOUT BORV21 VREGEN NOWDT WDT32768
   Word  3: 8100   CCP2C1 NOPBADEN NOLPT1OSC MCLR
   Word  4: 0081   STVREN NOLVP ICSP1 NOXINST NODEBUG
   Word  5: C00F   NOPROTECT NOCPB NOCPD
   Word  6: A00F   NOWRT NOWRTC WRTB NOWRTD
   Word  7: 400F   NOEBTR NOEBTRB
